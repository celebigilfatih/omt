{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/celebigil/Dev/omt/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { writeFile } from \"fs/promises\";\nimport { join } from \"path\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const data = await request.formData();\n    const file: File | null = data.get('logo') as unknown as File;\n\n    if (!file) {\n      return NextResponse.json(\n        { message: \"Dosya bulunamadı\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json(\n        { message: \"Geçersiz dosya türü. Sadece JPG, PNG ve GIF dosyaları kabul edilir.\" },\n        { status: 400 }\n      );\n    }\n\n    // Validate file size (5MB max)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSize) {\n      return NextResponse.json(\n        { message: \"Dosya boyutu 5MB'dan küçük olmalıdır.\" },\n        { status: 400 }\n      );\n    }\n\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // Generate unique filename\n    const fileExtension = file.name.split('.').pop();\n    const fileName = `${uuidv4()}.${fileExtension}`;\n    \n    // Create uploads directory if it doesn't exist\n    const uploadsDir = join(process.cwd(), 'public', 'uploads');\n    const filePath = join(uploadsDir, fileName);\n\n    // Write file to public/uploads directory\n    await writeFile(filePath, buffer);\n\n    // Return the public URL\n    const fileUrl = `/uploads/${fileName}`;\n\n    return NextResponse.json({\n      message: \"Dosya başarıyla yüklendi\",\n      url: fileUrl\n    });\n\n  } catch (error) {\n    console.error(\"File upload error:\", error);\n    return NextResponse.json(\n      { message: \"Dosya yüklenirken bir hata oluştu\" },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,QAAQ;QACnC,MAAM,OAAoB,KAAK,GAAG,CAAC;QAEnC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAmB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,eAAe;YAAC;YAAc;YAAa;YAAa;SAAY;QAC1E,IAAI,CAAC,aAAa,QAAQ,CAAC,KAAK,IAAI,GAAG;YACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAsE,GACjF;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,UAAU,IAAI,OAAO,MAAM,MAAM;QACvC,IAAI,KAAK,IAAI,GAAG,SAAS;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAwC,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,2BAA2B;QAC3B,MAAM,gBAAgB,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG;QAC9C,MAAM,WAAW,GAAG,IAAA,mLAAM,IAAG,CAAC,EAAE,eAAe;QAE/C,+CAA+C;QAC/C,MAAM,aAAa,IAAA,yGAAI,EAAC,QAAQ,GAAG,IAAI,UAAU;QACjD,MAAM,WAAW,IAAA,yGAAI,EAAC,YAAY;QAElC,yCAAyC;QACzC,MAAM,IAAA,kIAAS,EAAC,UAAU;QAE1B,wBAAwB;QACxB,MAAM,UAAU,CAAC,SAAS,EAAE,UAAU;QAEtC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,KAAK;QACP;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAoC,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}